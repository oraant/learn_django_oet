# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-08-30 08:21
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GlobalConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('enable', models.BooleanField(default=True, help_text=b'NOTICE!! Only one row can be enabled!!')),
                ('desc', models.CharField(max_length=300)),
                ('run', models.BooleanField(default=True, help_text=b'Do you want to start or stop this model at web level.')),
                ('log_level', models.CharField(choices=[(b'0', b'NOTSET'), (b'10', b'DEBUG'), (b'20', b'INFO'), (b'30', b'WARNING'), (b'40', b'ERROR'), (b'50', b'CRITICAL')], max_length=50)),
            ],
            options={
                'verbose_name': 'Global Config',
                'verbose_name_plural': 'Global Configs',
            },
        ),
        migrations.CreateModel(
            name='MySQLServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('enable', models.BooleanField(default=True)),
                ('desc', models.CharField(max_length=300)),
                ('ip', models.GenericIPAddressField(help_text=b'Use 127.0.0.1 instead of localhost to enforce port')),
                ('port', models.IntegerField(help_text=b'Will not work if ip is localhost')),
                ('user', models.CharField(help_text=b'the user need privileges to create or drop databases and tables!', max_length=30)),
                ('password', models.CharField(blank=True, max_length=30, null=True)),
                ('prefix', models.CharField(default=b'mirror_', help_text=b"prefix of databases' name to avoid name conflict.", max_length=30)),
            ],
            options={
                'verbose_name': 'MySQL Server',
                'verbose_name_plural': 'MySQL Servers',
            },
        ),
        migrations.CreateModel(
            name='Ora11gR2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('enable', models.BooleanField(default=True)),
                ('desc', models.CharField(max_length=300)),
                ('period', models.DurationField(help_text=b'Format is like 0:01:10 for 70 seconds.')),
                ('pull', models.TextField(max_length=900, validators=[django.core.validators.RegexValidator(inverse_match=True, message=b"Please Don't Input signs like ';'", regex=b';')])),
                ('create', models.TextField(max_length=900, validators=[django.core.validators.RegexValidator(inverse_match=True, message=b"Please Don't Input signs like ';' , '#'", regex=b';|#'), django.core.validators.RegexValidator(message=b"sql missed 'IF NOT EXISTS' !", regex=b'(?i)if not exists'), django.core.validators.RegexValidator(message=b"sql missed 'ENGINE = MEMORY' !", regex=b'(?i)engine.*=.*memory')])),
                ('drop', models.TextField(max_length=900, validators=[django.core.validators.RegexValidator(inverse_match=True, message=b"Please Don't Input signs like ';' , '#'", regex=b';|#'), django.core.validators.RegexValidator(message=b"sql missed 'IF EXISTS' !", regex=b'(?i)if exists')])),
                ('insert', models.TextField(max_length=900, validators=[django.core.validators.RegexValidator(inverse_match=True, message=b"Please Don't Input signs like ';' , '#'", regex=b';|#'), django.core.validators.RegexValidator(message=b'sql missed %s !', regex=b'\\%s')])),
                ('delete', models.TextField(max_length=900, validators=[django.core.validators.RegexValidator(inverse_match=True, message=b"Please Don't Input signs like ';' , '#'", regex=b';|#')])),
            ],
            options={
                'verbose_name': "[Table Collections] Oracle 11G R2's table",
                'verbose_name_plural': '[Table Collections] Oracle 11G R2',
            },
        ),
        migrations.CreateModel(
            name='OracleTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('enable', models.BooleanField(default=True)),
                ('desc', models.CharField(max_length=300)),
                ('version', models.CharField(max_length=30)),
                ('rac', models.BooleanField(default=False)),
                ('dbid', models.CharField(max_length=30)),
                ('instance', models.IntegerField()),
                ('ip', models.GenericIPAddressField()),
                ('port', models.IntegerField()),
                ('user', models.CharField(max_length=30)),
                ('password', models.CharField(blank=True, max_length=30, null=True)),
                ('service', models.CharField(max_length=30)),
                ('table_collection', models.CharField(choices=[(b'Ora11gR2', b'[Table Collections] Oracle 11G R2')], max_length=30)),
                ('mysql_db', models.CharField(help_text=b'database name in the mysql server.', max_length=50)),
                ('redis_db', models.IntegerField(help_text=b'db number in the redis server.')),
                ('mysql_server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mirror.MySQLServer')),
            ],
            options={
                'verbose_name': 'Oracle Target',
                'verbose_name_plural': 'Oracle Targets',
            },
        ),
        migrations.CreateModel(
            name='RedisServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('enable', models.BooleanField(default=True)),
                ('desc', models.CharField(max_length=300)),
                ('ip', models.GenericIPAddressField()),
                ('port', models.IntegerField()),
                ('password', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'verbose_name': 'Redis Server',
                'verbose_name_plural': 'Redis Servers',
            },
        ),
        migrations.AddField(
            model_name='oracletarget',
            name='redis_server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mirror.RedisServer'),
        ),
    ]
