from daemon import DaemonContext
import socket
import logging


class SocketServer:
    """
    Run a server to handle messages.

    Attributes:
        logger (logging.Logger): Logger to log records.
        context (DaemonContext): Context for daemon process.
        listen (bool): Dose the server need keep listening
        actions (dict): Decide when receiving request with string, which method to respond it.

        CHECK_SOCKET_SERVER (str): request for check status of socket server.
        STOP_SOCKET_SERVER (str): request for stop socket server.

        SERVER_IS_RUNNING (str): status which means server is running.
        STOPPING_SERVER (str): status which means server is stopping.

    """

    def __init__(self, sock_host, sock_port):
        """
        Init class with parameters.
        Args:
            sock_host (str): IP Address to bind the server. "0.0.0.0" is supported.
            sock_port (int): The Port number for server listening on.
        """
        self.sock_host = sock_host
        self.sock_port = sock_port

        self.logger = logging.getLogger()
        self.context = DaemonContext()

        self.listen = True

        self.CHECK_SOCKET_SERVER, self.STOP_SOCKET_SERVER = 'CHECK_SOCKET_SERVER', 'STOP_SOCKET_SERVER'
        self.SERVER_IS_RUNNING, self.STOPPING_SERVER = 'SERVER_IS_RUNNING', 'STOPPING_SERVER'

        self.actions = {
            self.CHECK_SOCKET_SERVER: self.__check,
            self.STOP_SOCKET_SERVER: self.__stop
        }

    # functions in shell for call

    def start(self, daemon=True):
        """
        Start socket server.And optional turn this process in to background daemon.
        Args:
            daemon (bool): Running the server in background daemon or not.
        """
        self.logger.info("------------------------------------------------------------")
        self.logger.info("starting server at %s:%d." % (self.sock_host, self.sock_port))

        if daemon:
            with self.context:
                self.__start()
        else:
            self.__start()

    def request(self, request):
        """
        Open a client, connect to server and send request.
        Args:
            request (str): request string you want to send to server.
        Returns:
            str: response string from server. or error message generated by it self.
        Raises:
            socket.error: Unknown socket error occurred.
        """
        self.logger.debug("sending request to server with %s" % request)
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            client_socket.connect((self.sock_host, self.sock_port))
            client_socket.send(request)
            response = client_socket.recv(1024)
        except socket.error as e:
            if e.errno == 111:
                response = str("Can't connect to server.")
            else:
                raise e
        finally:
            client_socket.close()

        return response

    def stop(self):
        """Send stop request to server."""
        self.logger.info("stopping server")
        return self.request(self.STOP_SOCKET_SERVER)

    def check(self):
        """Send check request to server."""
        self.logger.info("checking server")
        return self.request(self.CHECK_SOCKET_SERVER)

    def test(self):
        """
        Test if socket server is running.
        Returns:
            bool: if socket is running.
        """
        self.logger.debug("testing if server is running")
        response = self.request(self.CHECK_SOCKET_SERVER)
        if response == self.SERVER_IS_RUNNING:
            return True
        else:
            return False

    # functions in background daemon to response

    def __start(self):
        """Start socket server and listening request!"""
        self.logger.debug("server starting in background.")

        self.logger.debug("calling child's _start()")
        self._start()  # over write by child class

        self.logger.debug("init socket server")
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # how long to wait when restart.
        self.server_socket.bind((self.sock_host, self.sock_port))
        self.server_socket.listen(1)

        self.logger.debug("socket server start listening")
        while self.listen:
            connection, address = self.server_socket.accept()
            request = connection.recv(1024)

            response = self.__handle(request)
            connection.send(response)

            if not self.listen:  # when stop keep listening.
                connection.close()
                self.logger.debug("socket server stopped")

    def __handle(self, request):
        """
        Choice a right way to handle the request.
        Args:
            request (str): requested received from client.
        Returns:
            str: response string.
        """
        self.logger.debug("server handling request: %s." % request)

        if request in self.actions.keys():
            response = self.actions.get(request)()
        else:
            response = self._handle(request)

        self.logger.debug("child sending response: %s." % response)
        return response

    def __check(self):
        """return server's status"""
        self.logger.debug("server checking.")
        return self.SERVER_IS_RUNNING

    def __stop(self):
        """Close server and return server's status."""
        self.logger.debug("server stopping.")

        self.logger.debug("calling child's _stop()")
        self._stop()

        self.listen = False
        return self.STOPPING_SERVER

    # functions for child classes to overwrite.

    def _handle(self, request):
        """
        Need be overwrite by child class.
        Notes:
            Must return a str response.
        Args:
            request (str): requested received from client.
        Returns:
            str: response string.
        """
        return 'Parent Class is handling message.'

    def _start(self):
        self.logger.debug("child class didn't overwrite this method.")

    def _stop(self):
        self.logger.debug("child class didn't overwrite this method.")
